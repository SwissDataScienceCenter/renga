.. _renku:

Renku CLI
---------

The core of the Renku Project is the ``renku`` command-line interface (CLI), which offers
tools for easily capturing your data science process as you work. With these tools, you
can describe and annotate data and workflows, providing information that is used to
build the lineage of your results, simplifying iterative development and making your
work reproducible. The CLI can be used within Renkulab or locally, on your own machine.

The importance of version control for working with code is widely recognized.
`renku` aims to be "git for research", by extending version control to encompass
elements central to research: data and processes.

If that's too abstract, you can check out :ref:`firststeps` or see it in action in this video!

``renku`` can be decomposed into to the following pieces that are exposed to the user.

.. _git:
git
~~~

* when a renku command is run, a commit is created with the files that were added or changed during the command execution
* this commit also includes some hidden ``.renku`` metadata that holds the dataset metadata or describes the workflow
* the commit message contains the command you executed, so you can check ``git log`` to see what you did in the past (running a workflow, creating a dataset, initializing a project)

git-LFS (or other external storage)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* when you add data from outside a project with ``renku dataset`` commands, or call ``renku run`` to generate output data, these files are automatically flagged to be stored in the git-lfs object store upon `git push` to a Renkulab server
* keeping large files in LFS gives users the ability to control the amount of local space used by a project; LFS files can be left as pointers, and take up virtually no space, or can be pulled if needed

Datasets
~~~~~~~~

* import & publish datasets from/to places like `Zenodo <https://zenodo.org/>`_ and `Dataverse <https://dataverse.harvard.edu/>`_ that have DOIs
* auto-populate metadata for imported datasets (and created datasets based on their origins)
* user-annotation of datasets with `schema.org <https://schema.org>`_ metadata


Lineage of results
~~~~~~~~~~~~~~~~~~

* tracking lineage for a workflow (generate a graph that shows input, execution, and output nodes)
* simplified iterative workflow development (keep making changes to the code/data until you get the output you want)
* compare outputs generated by the same (maybe stoachastic) workflow: ``renku rerun``
* ...check out the `CLI documentation`_ for more!

Installing
~~~~~~~~~~

You can follow these `installation instructions`_ for running renku locally if you wish to
forego using renkulab or need to interact with your project locally.

.. _`installation instructions`: https://renku-python.readthedocs.io/en/latest/#installation

.. _`CLI documentation`: https://renku-python.readthedocs.io
