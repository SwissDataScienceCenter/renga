---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "renku.fullname" . }}
  labels:
    app: {{ template "renku.name" . }}
    chart: {{ template "renku.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  init-gitlab.sh: |-
    #!/usr/bin/env bash
    set -ex
    env

    apt-get update -y
    apt-get install -y curl jq

    BASE_URL="{{ (printf "http://%s" .Values.global.renku.domain) }}"
    GITLAB_SERVICE_URL="http://{{ template "gitlab.fullname" . }}{{ .Values.global.gitlab.urlPrefix }}"
    GITLAB_URL="{{ .Values.ui.gitlabUrl }}"

    until sleep 1; curl -f -s --connect-timeout 5 ${GITLAB_SERVICE_URL}/help; do
        echo waiting for gitlab
    done

    psql -v ON_ERROR_STOP=1 <<-EOSQL
        DELETE FROM oauth_applications WHERE uid='jupyterhub';
        INSERT INTO oauth_applications (name, uid, scopes, redirect_uri, secret, trusted)
        VALUES ('jupyterhub', 'jupyterhub', 'api read_user', '{{ template "http" . }}://{{ .Values.global.renku.domain }}{{ .Values.jupyterhub.hub.baseUrl }}hub/oauth_callback {{ template "http" . }}://{{ .Values.global.renku.domain }}/jupyterhub/hub/api/oauth2/authorize', '{{ .Values.jupyterhub.auth.gitlab.clientSecret }}', 'true');

        DELETE FROM oauth_applications WHERE uid='renku-ui';
        INSERT INTO oauth_applications (name, uid, scopes, redirect_uri, secret, trusted)
        VALUES ('renku-ui', 'renku-ui', 'api read_user', '$BASE_URL/login/redirect/gitlab', 'no-secret-needed', 'true');

        DELETE FROM personal_access_tokens WHERE user_id='1' AND name='managed sudo token';
        INSERT INTO personal_access_tokens ( user_id, token, name, revoked, expires_at, created_at, updated_at, scopes, impersonation)
        VALUES ( '1', '${GITLAB_SUDO_TOKEN}', 'managed sudo token', 'f', NULL, NOW(), NOW(), E'--- \n- api\n- read_user\n- sudo\n- read_registry', 'f');
    EOSQL


    # set up the admin user -- first check if the user is there already and grab the ID
    demo_id=$(curl -s -H "Private-Token: ${GITLAB_SUDO_TOKEN}" ${GITLAB_SERVICE_URL}/api/v4/users?username=demo | jq '.[0].id | select(.!=null)')

    if [[ -z "$demo_id" ]]; then
        method=POST
    else
        method=PUT
    fi

    curl -f -is -X ${method} -H "Private-token: ${GITLAB_SUDO_TOKEN}" \
        -d  '{"username": "demo",
        "email": "demo@datascience.ch",
        "name": "John Doe",
        "extern_uid": "demo",
        "provider": "oauth2_generic",
        "skip_confirmation": "true",
        "reset_password": "true",
        "admin": "{{ .Values.gitlab.demoUserIsAdmin }}"}' \
        -H "Content-Type: application/json" \
        ${GITLAB_SERVICE_URL}/api/v4/users/${demo_id}

    # configure the logout redirect
    curl -f -is -X PUT -H "Private-token: ${GITLAB_SUDO_TOKEN}" \
      ${GITLAB_SERVICE_URL}/api/v4/application/settings?after_sign_out_path={{ template "http" . }}://{{ .Values.global.renku.domain }}/auth/realms/Renku/protocol/openid-connect/logout?redirect_uri=${GITLAB_URL}

  # Init scripts that populate /docker-entrypoint-initdb.d

  # Unashamedly copied from: https://github.com/docker-library/postgres/blob/master/9.6/docker-entrypoint.sh
  init-postgres.sh: |-
    #!/bin/bash
    set -ex
    env
    
    until sleep 1; pg_isready; do
        echo waiting for postgres
    done
    
    # It's ok if init scripts fail (databases already exist)
    set +e
    for f in /scripts/init-*-db*; do
      case "$f" in
        *.sh)
          # https://github.com/docker-library/postgres/issues/450#issuecomment-393167936
          # https://github.com/docker-library/postgres/pull/452
          if [ -x "$f" ]; then
            echo "$0: running $f"
            "$f"
          else
            echo "$0: sourcing $f"
            . "$f"
          fi
          ;;
        *.sql)    echo "$0: running $f"; "${psql[@]}" -f "$f"; echo ;;
        *.sql.gz) echo "$0: running $f"; gunzip -c "$f" | "${psql[@]}"; echo ;;
        *)        echo "$0: ignoring $f" ;;
      esac
      echo
    done

  init-keycloak-db.sh: |-
    #!/bin/bash
    set -x
    
    KEYCLOAK_PASSWORD=$(cat /passwords/keycloak-password)

    psql -v ON_ERROR_STOP=1 <<-EOSQL
        create database "{{ .Values.global.keycloak.postgresDatabase }}";
        create user "{{ .Values.global.keycloak.postgresUser }}" password '$KEYCLOAK_PASSWORD';
    EOSQL

    psql -v ON_ERROR_STOP=1 --dbname "{{ .Values.global.keycloak.postgresDatabase }}" <<-EOSQL
        revoke all on schema "public" from "public";
        grant all privileges on database "{{ .Values.global.keycloak.postgresDatabase }}" to "{{ .Values.global.keycloak.postgresUser }}";
        grant all privileges on schema "public" to "{{ .Values.global.keycloak.postgresUser }}";
    EOSQL

  init-gitlab-db.sh: |-
      #!/bin/bash
      set -x
      
      GITLAB_PASSWORD=$(cat /passwords/gitlab-password)

      psql -v ON_ERROR_STOP=1 <<-EOSQL
          create database "{{ .Values.global.gitlab.postgresDatabase }}";
          create user "{{ .Values.global.gitlab.postgresUser }}" password '$GITLAB_PASSWORD';
      EOSQL

      psql -v ON_ERROR_STOP=1 --dbname "{{ .Values.global.gitlab.postgresDatabase }}" <<-EOSQL
          create extension if not exists "pg_trgm";
          revoke all on schema "public" from "public";
          grant all privileges on database "{{ .Values.global.gitlab.postgresDatabase }}" to "{{ .Values.global.gitlab.postgresUser }}";
          grant all privileges on schema "public" to "{{ .Values.global.gitlab.postgresUser }}";
      EOSQL

  init-jupyterhub-db.sh: |-
      #!/bin/bash
      set -x
      
      JUPYTERHUB_PASSWORD=$(cat /passwords/jupyterhub-password)

      psql -v ON_ERROR_STOP=1 <<-EOSQL
          create database "{{ .Values.global.jupyterhub.postgresDatabase }}";
          create user "{{ .Values.global.jupyterhub.postgresUser }}" password '$JUPYTERHUB_PASSWORD';
      EOSQL

      psql -v ON_ERROR_STOP=1 --dbname "{{ .Values.global.jupyterhub.postgresDatabase }}" <<-EOSQL
          create extension if not exists "pg_trgm";
          revoke all on schema "public" from "public";
          grant all privileges on database "{{ .Values.global.jupyterhub.postgresDatabase }}" to "{{ .Values.global.jupyterhub.postgresUser }}";
          grant all privileges on schema "public" to "{{ .Values.global.jupyterhub.postgresUser }}";
      EOSQL
