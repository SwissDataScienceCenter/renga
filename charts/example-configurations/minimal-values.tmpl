#
# Basic configuration file for Renku 0.7.1
#

---
domain_configurations:
  mainURL:                   &mainURL                       [domain]
  baseURL:                   &baseURL                       https://[domain]
  jupyterhubURL:             &jupyterhubURL                 https://[domain]/jupyterhub
  gatewayURL:                &gatewayURL                    https://[domain]/api
  jupyterhubAuthCallbackUrl: &jupyterhub_gitlab_callbackUrl https://[domain]/jupyterhub/hub/oauth_callback
  oauth_redirect_uri:        &oauth_redirect_uri            https://[domain]/api/auth/jupyterhub/token
  ingressTLS:                &ingressTLS                    [ingress-tls]

  gitlabURL:                 &gitlabURL                     https://[gitlab-domain]
  gitlabPrefix:              &gitlabPrefix                  [gitlab-prefix]           ## /gitlab if part of Renku, / otherwise
  gitlabClientId:            &gitlabClientId                [gitlab-application-clientID]
  gitlabClientSecret:        &gitlabClientSecret            [gitlab-application-secret]

  hubGitlabClientId:         &hubGitlabClientId             [hub-gitlab-application-clientID] ## If external GitLab, use gitlab-application-clientID
  hubGitlabClientSecret:     &hubGitlabClientSecr           [hub-gitlab-application-secret]  ## If external GitLab, use gitlab-application-secret

  registryName:              &registryName                  [gitlab-registry]
  registryURL:               &registryURL                   https://[gitlab-registry]
  registry_tls:              &registry_tls                  [registry-ingress-tls]

## Global variables
## Shared values/secrets
global:
  gitlab:
    ## Secret of the gitlab client app in keycloak. Only needed if gitlab is deployed as part of Renku
    ## and thus relies on keycloak for authentication. To change this value after deploying, first
    ## generate a new secret using the Keycloak admin console then paste the generated secret here and redeploy.
    ##     clientSecret: # use `uuidgen -r`
    clientSecret:  [random]        ## Taken from gitlab client in keycloak
    ## Postgres password for the gitlab database
    postgresPassword:
      value:  [random]        ## openssl rand -hex 32
    ## URL prefix for gitlab
    urlPrefix: *gitlabPrefix

  keycloak:
    ## Postgres password for the Keycloak database
    postgresPassword:
      value:  [random]        ## openssl rand -hex 32
    ## Admin password for Keycloak
    password:
      value:  [random]        ## openssl rand -hex 32
  jupyterhub:
    ## Postgres password for the jupyterhub database
    postgresPassword:
      value:  [random]        ## openssl rand -hex 32
  gateway:
    ## clientSecret: # use `uuidgen -r`
    clientSecret:  [random]        ## Taken from gateway client in keycloak
    ## The client secret for authentication against gitlab
    gitlabClientSecret:   [random]        ## Taken from renku-ui gitlab application secret
  renku:
    ## Domain name for the deployed instance of renku
   domain: *mainURL
  ## Note that the graph will not turned on by default until renku 0.4.0
  graph:
    dbEventLog:
      ## Postgres password to be used to access the Event Log db
      postgresPassword:
        value:  [random]        ## openssl rand -hex 32
    tokenRepository:
      ## Postgres password to be used to access the db storing access tokens
      postgresPassword:
        value:  [random]        ## openssl rand -hex 32
  useHTTPS: true

## Ingress configuration
## See: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  ## Hosts for the ingress
  ## Should include at least the value from `global.renku.domain`
  hosts:
  - *mainURL

  ## TLS setting for the ingress
  tls:
  - hosts:
    - *mainURL
    secretName: *ingressTLS

## Gitlab configuration
gitlab:
  ## Spawn a gitlab instance
  enabled: [gitlab-enabled]
  ## Password for the `root` user
  password:  [random]        ## openssl rand -hex 32

  ## automatically log in to gitlab
  oauth:
    autoSignIn: false

  ## Registration token for gitlab runners (initial value, can be regenerated from gitlab admin ui)
  ## Generated using: `openssl rand -hex 32`
  sharedRunnersRegistrationToken:  [random]        ## openssl rand -hex 32
  ssh:
    externalPort: 22
    nodePortService:
      enabled: true
      nodePort: 32022
# persistence:
#   existingClaim: renku-gitlab

  ## Set to true to make the user 'demo' a GitLab admin
  demoUserIsAdmin: true

  ## LFS objects settings
  ## Used to store git-lfs objects externally
  ## Note: bucket must exist before use, GitLab won't do it
  ## Follows: https://docs.gitlab.com/ce/workflow/lfs/lfs_administration.html#storing-lfs-objects-in-remote-object-storage
  # lfsObjects:
      ## Set to true to enable remote LFS objects
      # enabled: false
      ## Bucket name
      # bucketName: lfs-objects
      # directUpload: false
      # backgroundUpload: true
      # proxyDownload: false
      # connection: |-
      #   {
      #     'provider' => 'AWS',
      #     'region' => 'eu-central-1',
      #     'aws_access_key_id' => '1ABCD2EFGHI34JKLM567N',
      #     'aws_secret_access_key' => 'abcdefhijklmnopQRSTUVwxyz0123456789ABCDE',
      #     # The below options configure an S3 compatible host instead of AWS
      #     'host' => 'localhost',
      #     'endpoint' => 'http://127.0.0.1:9000',
      #     'path_style' => true
      #   }

  registry:
    ## Set to true to enable Gitlab registry
    enabled: true
    ## The URL to access the registry
    externalUrl: *registryURL
    backendHealthcheck: false
    ## Registry storage configuration. Used to store registry docker images externally
    # storage: |-
    #   {
    #     'swift' => {
    #       'authurl' => '',
    #       'username' => '',
    #       'password' => '',
    #       'region' => '',
    #       'container' => 'registry',
    #       'tenantid' => '',
    #       'domain' => 'Default'
    #     }
    #   }
    exposedAs: Ingress
    ingress:
      annotations:
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/proxy-body-size: '0'
      hosts:
      - *registryName
      tls:
      - hosts:
        - *registryName
        secretName: *registry_tls

postgresql:
  postgresqlPassword:   [random]        ## openssl rand -hex 32
#  persistence:
#    existingClaim: renku-postgresql

## Configuration for the UI service
ui:
  #  welcomePage:
  #    text: "## Some markdown text here!"
  gatewayUrl: *gatewayURL
  baseUrl: *baseURL
  gitlabUrl: *gitlabURL
  jupyterhubUrl: *jupyterhubURL
#  welcomePage:
#    text: |
#      Fill-in what will go in the welcome page of your Renkulab deployment

## Configuration for the notebooks service
notebooks:
  gitlab:
    ## specify the GitLab instance URL
    url: *gitlabURL
    registry:
      host: *registryName
  jupyterhub:
    ## Configure rbac
    rbac:
      enabled: true
    hub:
      ## Secret used for signing JH cookies. Must be explicitly set, otherwise all
      ## users are logged out whenever the hub pod is recreated!
      ## See https://zero-to-jupyterhub.readthedocs.io/en/latest/reference/reference.html#hub-cookiesecret
      cookieSecret:  [random]        ## openssl rand -hex 32
      baseUrl: '/jupyterhub/'
      db:
        type: postgres
        url: postgres+psycopg2://jupyterhub@renku-postgresql:5432/jupyterhub
      services:
        ## Set the notebooks service API token
        notebooks:
          apiToken:   [random]        ## openssl rand -hex 32
        ## define the client ID and secret for the gateway
        gateway:
          oauth_client_id: &gwJHclientId gateway
          apiToken: &gwJHclientId  [random]        ## openssl rand -hex 32
          oauth_redirect_uri: *oauth_redirect_uri
      extraEnv:
        - name: GITLAB_URL
          value: *gitlabURL
        - name: DEBUG
          value: "1"
        - name: JUPYTERHUB_SPAWNER_CLASS
          value: spawners.RenkuKubeSpawner
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: renku-jupyterhub-postgres
              key: jupyterhub-postgres-password
    proxy:
      ## Must be set explicitly, generate using `openssl rand -hex 32`
      secretToken:   [random]        ## openssl rand -hex 32

    ## Configure Jupyterhub to use GitLab as OAuth2 provider
    auth:
      gitlab:
        clientId: *hubGitlabClientId
        clientSecret: *hubGitlabClientSecret
        callbackUrl: *jupyterhub_gitlab_callbackUrl
    ## Store encrypted auth state in the JH db (enabled by default).
    ## Key for encryption must be set explicitly!
    ## See https://zero-to-jupyterhub.readthedocs.io/en/latest/reference/reference.html?highlight=cryptokey#auth-state
      state:
        enabled: true
        cryptoKey:    [random]        ## openssl rand -hex 32

## Configuration for the Gateway service
gateway:
  gitlabUrl: *gitlabURL
  gitlabClientId: *gitlabClientId
  gitlabClientSecret: *gitlabClientSecret
  secretKey: &gateway_secretKey   [random]        ## openssl rand -hex 32
  jupyterhub:
    clientId: *gwJHclientId
    clientSecret: *gwJHclientSecret
  graph:
    sparql:
      username: renku
      password: &sparql_password [random]        ## openssl rand -hex 32

## Configuration for renku-graph
graph:
  ## Configuration for Apache Jena
  jena:
    users:
      admin:
        password:   [random]        ## openssl rand -hex 32
      renku:
        password: *sparql_password
#    persistence:
#      existingClaim: renku-jena
  gitlab:
    url: *gitlabURL

  tokenRepository:
    ## A secret for signing access tokens stored in the database
    ## Generated using: `openssl rand -hex 8|base64`
    tokenEncryption:
      secret:  [randombase64]  ## openssl rand -hex 8|base64
  webhookService:
    ## A secret for signing request header tokens to be sent by GitLab with the Push Events
    ## Generated using: `openssl rand -hex 8|base64`
    hookToken:
      secret:  [randombase64]  ## openssl rand -hex 8|base64
