name: Test dev values

on: [push]

jobs:
  github-env:
    runs-on: ubuntu-latest
    steps:
    - name: get environment
      run: env
  decrypt-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Decrypt test secret
      env:
        RENKUBOT_GPG_PASSPHRASE: ${{ secrets.RENKUBOT_GPG_PASSPHRASE }}
        TEST_SECRET_GPG: ${{ secrets.TEST_SECRET_GPG }}
      run: |
          echo "$TEST_SECRET_GPG" > my_secret.txt.gpg
         ./.github/scripts/decrypt_secret.sh
    - name: Test printing secret
      run: cat my_secret.txt
  decrypt-values:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Decrypt values
      env:
        RENKUBOT_GPG_PASSPHRASE: ${{ secrets.RENKUBOT_GPG_PASSPHRASE }}
        RENKUBOT_GPG_PRIVATE: ${{ secrets.RENKUBOT_GPG_PRIVATE }}
        # OPS_GPG_KEYS: ${{ secrets.OPS_GPG_KEYS }}
        OPS_SIGNED_GPG_KEYS: ${{ secrets.OPS_SIGNED_GPG_KEYS }}
        RENKUBOT_OPSDEV_TOKEN: ${{ secrets.RENKUBOT_OPSDEV_TOKEN }}
        # TRUSTED_GPG: ${{ secrets.TRUSTED_GPG }}
        TEST_SECRET_GPG: ${{ secrets.TEST_SECRET_GPG }}
      run: |
          # Import secret key
          echo "$RENKUBOT_GPG_PRIVATE" > renkubot-privatekey.asc
          gpg --batch --yes --passphrase="$RENKUBOT_GPG_PASSPHRASE" --import renkubot-privatekey.asc

          echo -e "trust\n5\ny\n" |  gpg --no-tty --command-fd 0 --expert --edit-key 87ED866E046317B13177E9D79B397DE9953E94F1
          export keys=`gpg --list-secret-keys`
          echo "::warning file=app.js,line=1,col=5::AFTER trusting secret key $keys"

          # Import public keys
          printf "%s" "$OPS_SIGNED_GPG_KEYS" > ops.gpg.pub
          gpg --import ops.gpg.pub
          export keys=`gpg --list-keys`
          echo "::warning file=app.js,line=1,col=5::AFTER importing public keys $keys"

          # Test encrypt
          echo "testencrypt" > unencrypted-text.txt
          gpg --encrypt --batch --passphrase="$RENKUBOT_GPG_PASSPHRASE"  --sign --armor -r pamela.delgado@epfl.ch unencrypted-text.txt
          echo "::warning file=app.js,line=1,col=5::AFTER encrypt"

          # Decrypt test file
          echo "$TEST_SECRET_GPG" > secret.txt.asc
          gpg --decrypt --batch --passphrase="$RENKUBOT_GPG_PASSPHRASE"  secret.txt.asc  > test-secret.txt
          cat test-secret.txt

          # Install sops
          # curl -sL https://github.com/mozilla/sops/releases/download/v3.5.0/sops-v3.5.0.linux -o ./sops &&  chmod +x ./sops
          # sudo mv ./sops /usr/local/bin/sops
          # export OUT=`sops --version`
          # echo "::warning file=app.js,line=1,col=5::Installed SOPS $OUT"

          # git clone https://RenkuBot:${RENKUBOT_OPSDEV_TOKEN}@github.com/SwissDataScienceCenter/ops-dev.renku.ch.git
          # cd ops-dev.renku.ch
          # git checkout test-gpg
          # export ENC_FILE=`ls -lt dev-ci-values.yaml.gpg`
          # echo "::warning file=app.js,line=1,col=5::AFTER cloning repo, $ENC_FILE"

          # gpg --decrypt dev-ci-values.yaml.gpg > dev-ci-values.yaml

          # echo "::warning file=app.js,line=1,col=5::BEFORE reloading gpgconf $OUT"
          # gpgconf --reload gpg-agent
          # export OUT=`gpgconf`
          # echo "::warning file=app.js,line=1,col=5::BEFORE reloading gpgconf $OUT"
          # export GPG_TTY=`$(tty)`
          # echo "::warning file=app.js,line=1,col=5::BEFORE decrypting, tty: $GPG_TTY"
          # make decrypt
          # export SOPS_PGP_FP="2E8E3E6447725A15025BD90E859123913F532F3E, 26876013D56711FC505728BB27D534C5B76B95F9, A4F184F64A53A8D026BA6352C1E9364F2F2585FB, FE818AFB977D00CECC07E3A097253E0453A2EA8A, 9890BC728622162CD986B35692A4279A8A54C999, 2BA5A9B58AE078B6CAF9E3C5282A71B05A608299, 87ED866E046317B13177E9D79B397DE9953E94F1"
          # sops -d secured-values.yaml > unsecured-values.yaml
          # echo "::warning file=app.js,line=1,col=5::AFTER decrypt"
          # make values
