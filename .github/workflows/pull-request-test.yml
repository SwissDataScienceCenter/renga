name: Deploy and Test PR
on:
  pull_request:
    types:
    - opened
    - synchronize
    - reopened

jobs:
  cleanup-previous-runs:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    steps:
    - uses: rokroskar/workflow-run-cleanup-action@master
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  github-env:
    runs-on: ubuntu-latest
    steps:
    - name: get environment
      run: env
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
  test-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: install dependencies
      run: |
        sudo apt-get update -y && sudo apt-get install graphviz
        pip install --upgrade pip pipenv
        pipenv install --deploy --dev --system
    - name: test the docs build
      env:
        SIDEBAR: 1
      run: |
        cd docs
        sphinx-build -nNW -b spelling -d _build/doctrees . _build/spelling
        sphinx-build -qnNW . _build/html
    - name: Upload docs
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: docs
        path: docs/_build/html/
  deploy-pr:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    needs: cleanup-previous-runs
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        sudo apt-get update -y && sudo apt-get install -y snapd
        sudo snap install kubectl --channel=1.16/stable --classic
        sudo snap install helm --channel=3.3/stable --classic
        echo "PATH=/snap/bin:$PATH" >> $GITHUB_ENV
        pip install --upgrade pip pipenv
        pipenv install --deploy --dev --system
    - name: Configure environment
      run: |
        PR_NUMBER=${{ github.event.number }}
        echo "RENKU_RELEASE=ci-${PR_NUMBER}-renku" >> $GITHUB_ENV
        echo "RENKU_NAMESPACE=ci-${PR_NUMBER}-renku" >> $GITHUB_ENV
        echo "RENKU_TMP_NAMESPACE=ci-${PR_NUMBER}-renku-tmp" >> $GITHUB_ENV
    - name: Configure GitLab application
      env:
        GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
      run: |
        gitlab_app=$(curl -s -X POST https://dev.renku.ch/gitlab/api/v4/applications \
                      -H "private-token: $GITLAB_TOKEN" \
                      --data "name=${RENKU_RELEASE}" \
                      --data "redirect_uri=https://${RENKU_RELEASE}.dev.renku.ch/auth/realms/Renku/broker/dev-renku/endpoint https://${RENKU_RELEASE}.dev.renku.ch/api/auth/gitlab/token https://${RENKU_RELEASE}.dev.renku.ch/api/auth/jupyterhub/token https://${RENKU_RELEASE}.dev.renku.ch/jupyterhub/hub/oauth_callback" \
                      --data "scopes=api read_user read_repository read_registry openid")
        APP_ID=$(echo $gitlab_app | jq -r '.application_id')
        APP_SECRET=$(echo $gitlab_app | jq -r '.secret')
        echo "APP_ID=${APP_ID}" >> $GITHUB_ENV
        echo "APP_SECRET=${APP_SECRET}" >> $GITHUB_ENV
    - name: Deploy to k8s
      env:
        KUBECONFIG: ${{ github.workspace }}/renkubot-kube.config
        RENKUBOT_KUBECONFIG: ${{ secrets.RENKUBOT_KUBECONFIG }}
        CI_RENKU_VALUES: ${{ secrets.CI_RENKU_VALUES }}
        RENKUBOT_RANCHER_APISECRET: ${{ secrets.RENKUBOT_RANCHER_APISECRET }}
        CI_PROJECT_ID: ${{ secrets.CI_PROJECT_ID }}
        RENKU_BOT_DEV_PASSWORD: ${{ secrets.RENKU_BOT_DEV_PASSWORD }}
        OS_DEV_ACCESS: ${{ secrets.OS_DEV_ACCESS }}
        OS_DEV_SECRET: ${{ secrets.OS_DEV_SECRET }}
      run: |
        echo "$RENKUBOT_KUBECONFIG" > renkubot-kube.config
        helm repo add stable https://charts.helm.sh/stable
        helm repo add codecentric https://codecentric.github.io/helm-charts
        helm repo add renku https://swissdatasciencecenter.github.io/helm-charts/
        helm repo add gitlab https://charts.gitlab.io/
        helm repo add jupyterhub https://jupyterhub.github.io/helm-chart
        rm -rf charts/renku/charts
        helm dependency update charts/renku
        printf "%s" "$CI_RENKU_VALUES" | sed "s/<replace>/${RENKU_RELEASE}/" > values.yaml
        curl -u "token-fxgsb:$RENKUBOT_RANCHER_APISECRET" \
        -X POST \
        -d "name=${RENKU_NAMESPACE}" \
        -d "projectId=${CI_PROJECT_ID}" \
        'https://rancher.renku.ch/v3/cluster/c-l6jt4/namespaces'
        helm upgrade --install $RENKU_RELEASE \
                    --namespace $RENKU_NAMESPACE \
                    -f values.yaml \
                    --timeout 1800s \
                    --cleanup-on-fail \
                    --set gateway.gitlabClientId=${APP_ID} \
                    --set gateway.gitlabClientSecret=${APP_SECRET} \
                    --set notebooks.jupyterhub.auth.gitlab.clientId=${APP_ID} \
                    --set notebooks.jupyterhub.auth.gitlab.clientSecret=${APP_SECRET} \
                    --set global.anonymousSessions.enabled=true \
                    --set tests.enabled="true" \
                    --set tests.parameters.username="renku-test" \
                    --set tests.parameters.fullname="Renku Bot" \
                    --set tests.parameters.email="renku@datascience.ch" \
                    --set tests.parameters.password="$RENKU_BOT_DEV_PASSWORD" \
                    --set tests.parameters.anonAvailable="true" \
                    --set tests.parameters.register="true" \
                    --set tests.resultsS3.host="os.zhdk.cloud.switch.ch" \
                    --set tests.resultsS3.bucket="dev-acceptance-tests-results" \
                    --set tests.resultsS3.filename="tests-artifacts-${GITHUB_SHA}" \
                    --set tests.resultsS3.accessKey=$OS_DEV_ACCESS \
                    --set tests.resultsS3.secretKey=$OS_DEV_SECRET \
                    --set keycloak.test.enabled=false \
                    charts/renku
    - name: Turn on anonymous notebooks
      env:
        KUBECONFIG: ${{ github.workspace }}/renkubot-kube.config
        RENKUBOT_KUBECONFIG: ${{ secrets.RENKUBOT_KUBECONFIG }}
        CI_RENKU_VALUES: ${{ secrets.CI_RENKU_VALUES }}
        RENKUBOT_RANCHER_APISECRET: ${{ secrets.RENKUBOT_RANCHER_APISECRET }}
        CI_PROJECT_ID: ${{ secrets.CI_PROJECT_ID }}
      run: |
        echo "$RENKUBOT_KUBECONFIG" > renkubot-kube.config
        curl -u "token-fxgsb:$RENKUBOT_RANCHER_APISECRET" \
        -X POST \
        -d "name=${RENKU_TMP_NAMESPACE}" \
        -d "projectId=${CI_PROJECT_ID}" \
        'https://rancher.renku.ch/v3/cluster/c-l6jt4/namespaces'
        charts/deploy-tmp-notebooks.py --release-name $RENKU_RELEASE --renku-namespace $RENKU_NAMESPACE
    - name: Notify slack
      if: success()
      env:
        RENKU_SLACK_BOT_TOKEN: ${{ secrets.RENKU_SLACK_BOT_TOKEN }}
        PR_URL: ${{ github.event.pull_request._links.html.href }}
      run: |
        curl -X POST https://slack.com/api/chat.postMessage \
             -H "Authorization: Bearer $RENKU_SLACK_BOT_TOKEN" \
             --data "channel=C9U45DL1H" \
             --data "text=I just deployed the PR ${PR_URL} at https://${RENKU_RELEASE}.dev.renku.ch :rocket:"
  test-pr:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    needs: deploy-pr
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        sudo apt-get update -y && sudo apt-get install -y grep
        pip install yq
    - name: Test the PR
      env:
        KUBECONFIG: ${{ github.workspace }}/renkubot-kube.config
        RENKUBOT_KUBECONFIG: ${{ secrets.RENKUBOT_KUBECONFIG }}
        RELEASE: ci-${{ github.event.number }}-renku
      run: |
        echo "$RENKUBOT_KUBECONFIG" > renkubot-kube.config
        helm test $RELEASE --namespace $RELEASE --timeout 40m --logs
    - name: Download artifact for packaging on failure
      env:
        OS_DEV_ACCESS: ${{ secrets.OS_DEV_ACCESS }}
        OS_DEV_SECRET: ${{ secrets.OS_DEV_SECRET }}
      if: failure()
      run: |
        sudo wget --quiet https://dl.min.io/client/mc/release/linux-amd64/mc -O /usr/local/bin/mc
        sudo chmod 0755 /usr/local/bin/mc
        export MC_HOST_bucket="https://${OS_DEV_ACCESS}:${OS_DEV_SECRET}@os.zhdk.cloud.switch.ch"
        mkdir test-artifacts/
        mc cp bucket/dev-acceptance-tests-results/tests-artifacts-${GITHUB_SHA}.tgz .
        mc rm bucket/dev-acceptance-tests-results/tests-artifacts-${GITHUB_SHA}.tgz
        tar -C test-artifacts/ -xzvf tests-artifacts-${GITHUB_SHA}.tgz
    - name: Upload screenshots on failure
      if: failure()
      uses: actions/upload-artifact@v1
      with:
        name: acceptance-test-artifacts
        path: test-artifacts/
