name: Deploy and Test PR
on:
  pull_request:
    types:
    - opened
    - synchronize
    - reopened

jobs:
  cleanup-previous-runs:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    steps:
    - uses: rokroskar/workflow-run-cleanup-action@master
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  github-env:
    runs-on: ubuntu-latest
    steps:
    - name: get environment
      run: env
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
  test-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: install dependencies
      run: |
        sudo apt-get update -y && sudo apt-get install graphviz
        pip install --upgrade pip pipenv
        pipenv install --deploy --dev --system
    - name: test the docs build
      env:
        SIDEBAR: 1
      run: |
        cd docs
        sphinx-build -nNW -b spelling -d _build/doctrees . _build/spelling
        sphinx-build -qnNW . _build/html
    - name: Upload docs
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: docs
        path: docs/_build/html/
  deploy-pr:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: renku build and deploy
      uses: ./actions/deploy-renku
      env:
        RANCHER_PROJECT_ID: ${{ secrets.CI_PROJECT_ID }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
        KUBECONFIG: "${{ github.workspace }}/renkubot-kube.config"
        RENKU_NAMESPACE: ci-${{ github.event.number }}-renku
        RENKU_TMP_NAMESPACE: ci-${{ github.event.number }}-renku-tmp
        RENKU_RELEASE: ci-${{ github.event.number }}-renku
        RENKU_VALUES_FILE: "${{ github.workspace }}/values.yaml"
        RENKU_VALUES: ${{ secrets.CI_RENKU_VALUES }}
        RENKUBOT_KUBECONFIG: ${{ secrets.RENKUBOT_KUBECONFIG }}
        RENKUBOT_RANCHER_APISECRET: ${{ secrets.RENKUBOT_RANCHER_APISECRET }}
        renku: "@${{ github.head_ref }}"
  test-pr:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    needs: deploy-pr
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        sudo apt-get update -y && sudo apt-get install -y grep
        pip install yq
    - name: Test the PR
      env:
        RENKU_BOT_DEV_PASSWORD: ${{ secrets.RENKU_BOT_DEV_PASSWORD }}
      run: |
        export PR_NUMBER=${{ github.event.number }}
        echo $PR_NUMBER
        export RENKU_RELEASE="ci-${PR_NUMBER}-renku"

        RENKU_PYTHON_VERSION=v$(cat ./charts/renku/requirements.yaml | yq -r '.dependencies[] | select(.name == "renku-core") | .version')
        RENKU_PYTHON_COMMIT=$(echo $RENKU_PYTHON_VERSION | grep -o -P '(?<=-)[0-9a-fA-F]+') || true
        if [ $RENKU_PYTHON_COMMIT ]; then export RENKU_PYTHON_VERSION=$RENKU_PYTHON_COMMIT; fi
        echo "Passing renku-python version $RENKU_PYTHON_VERSION"

        cd acceptance-tests
        COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose build --build-arg renku_python_ref=${RENKU_PYTHON_VERSION} sbt
        docker-compose run -e RENKU_TEST_URL=https://${RENKU_RELEASE}.dev.renku.ch \
                           -e RENKU_TEST_FULL_NAME="Renku Bot" \
                           -e RENKU_TEST_EMAIL="renku@datascience.ch" \
                           -e RENKU_TEST_REGISTER="1" \
                           -e RENKU_TEST_USERNAME="renku-test" \
                           -e RENKU_TEST_PASSWORD="$RENKU_BOT_DEV_PASSWORD" \
                           -e RENKU_TEST_ANON_AVAILABLE="true" sbt
    - name: Prepare artifact for packaging on failure
      if: failure()
      run: |
        mkdir acceptance-tests/test-artifacts
        cp acceptance-tests/target/*.png acceptance-tests/test-artifacts 2>/dev/null || :
        cp acceptance-tests/target/*.log acceptance-tests/test-artifacts 2>/dev/null || :
        sudo rm -rf acceptance-tests/target/20*/.renku/cache 2>/dev/null || :
        cp -r acceptance-tests/target/20* acceptance-tests/test-artifacts 2>/dev/null || :
    - name: Upload screenshots on failure
      if: failure()
      uses: actions/upload-artifact@v1
      with:
        name: acceptance-test-artifacts
        path: acceptance-tests/test-artifacts
