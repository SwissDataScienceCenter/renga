# -*- coding: utf-8 -*-
#
# Copyright 2017, 2018 - Swiss Data Science Center (SDSC)
# A partnership between École Polytechnique Fédérale de Lausanne (EPFL) and
# Eidgenössische Technische Hochschule Zürich (ETHZ).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: '3'
volumes:
  db-data: {}
  gitlab-config: {}
  gitlab-logs: {}
  gitlab-data: {}
  gitlab-runner-data: {}
services:
  db:
    image: postgres:9.6
    environment:
      PGDATA: /pgdata
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    volumes:
      - ./services/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
      - db-data:/pgdata
    networks:
      - default

  keycloak:
    build: ./services/keycloak
    environment:
      KEYCLOAK_MIGRATION_FILE: /data/renga-realm.json
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_USER: admin
      POSTGRES_DATABASE: keycloak
      POSTGRES_PASSWORD: keycloak
      POSTGRES_PORT_5432_TCP_ADDR: db
      POSTGRES_USER: keycloak
      RENGA_ENDPOINT: ${RENGA_ENDPOINT}
      GITLAB_URL: ${GITLAB_URL}
      RENGA_UI_URL: ${RENGA_UI_URL}
      GITLAB_CLIENT_SECRET: ${GITLAB_CLIENT_SECRET}
      JUPYTERHUB_URL: ${JUPYTERHUB_URL}
      JUPYTERHUB_CLIENT_SECRET: ${JUPYTERHUB_CLIENT_SECRET}
    command:
      - "-b 0.0.0.0"
      - "-Dkeycloak.migration.action=import"
      - "-Dkeycloak.migration.provider=singleFile"
      - "-Dkeycloak.migration.file=/data/renga-realm.json"
      - "-Dkeycloak.migration.strategy=IGNORE_EXISTING"
    restart: on-failure
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: "Host:keycloak.${PLATFORM_DOMAIN}"
      traefik.frontend.entryPoints: "service, http"
      traefik.frontend.redirect.entryPoint: "service"
    depends_on:
      - db
    networks:
      default:
        aliases:
          - keycloak.${PLATFORM_DOMAIN}

  gitlab:
    image: gitlab/gitlab-ce:latest
    restart: always
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url '${GITLAB_URL}'
        registry_external_url '${GITLAB_REGISTRY_URL}'
        #postgresql['enable'] = false
        # Enable or disable automatic database migrations
        # gitlab_rails['auto_migrate'] = false
        # manually run: gitlab-ctl pg-upgrade
        # FIXME change from postgres to gitlab
        # TODO need to run gitlab-rake gitlab:setup for external db
        #gitlab_rails['db_username'] = 'postgres'
        #gitlab_rails['db_password'] = 'postgres'
        #gitlab_rails['db_host'] = 'db'
        #gitlab_rails['db_port'] = 5432
        #gitlab_rails['db_database'] = 'gitlab'
        #gitlab_rails['db_adapter'] = 'postgresql'
        #gitlab_rails['db_encoding'] = 'utf8'
        gitlab_rails['omniauth_enabled'] = true
        gitlab_rails['omniauth_allow_single_sign_on'] = ['oauth2_generic']
        gitlab_rails['omniauth_block_auto_created_users'] = false
        gitlab_rails['omniauth_providers'] = [
          {
            'name' => 'oauth2_generic',
            'app_id' => 'gitlab',
            'app_secret' => '${GITLAB_CLIENT_SECRET}',
            'args' => {
              client_options: {
                # Traefik maps keycloak to the URL below
                # CAREFUL: This must be accessible from inside the keycloak container
                # for service-to-service communication.
                'site' => '${KEYCLOAK_URL}/auth',
                'authorize_url' => '/auth/realms/Renga/protocol/openid-connect/auth',
                'user_info_url' => '/auth/realms/Renga/protocol/openid-connect/userinfo',
                'token_url' => '/auth/realms/Renga/protocol/openid-connect/token'
              },
              user_response_structure: {
                attributes: { email:'email', first_name:'given_name', last_name:'family_name', name:'name', nickname:'preferred_username' }, # if the nickname attribute of a user is called 'username'
                id_path: 'preferred_username'
              }
            },
            label: 'Renga Login'
          }
        ]
        gitlab_rails['gitlab_shell_ssh_port'] = 5022
        gitlab_rails['lfs_enabled'] = true
        gitlab_rails['lfs_storage_path'] = '/var/storage/lfs-objects'
        gitlab_rails['initial_root_password'] = 'root_password'
        # Add any other gitlab.rb configuration here, each on its own line
    ports:
      - '5022:22'
    volumes:
      - gitlab-config:/etc/gitlab
      - gitlab-logs:/var/log/gitlab
      - gitlab-data:/var/opt/gitlab
      - ./services/gitlab/lfs-data:/var/storage/lfs-objects # TODO: REMOVE ME
    depends_on:
      - db
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:gitlab.${PLATFORM_DOMAIN}
      traefik.port: '80'
    networks:
      default:
        aliases:
          - gitlab.${PLATFORM_DOMAIN}
      review:
        aliases:
          - gitlab.${PLATFORM_DOMAIN}

  gitlab-runner:
    image: ${DOCKER_PREFIX}gitlab-runner:${PLATFORM_VERSION}
    environment:
      RENGA_OIC_URL: ${RENGA_ENDPOINT}/auth/realms/Renga/
      RENGA_OIC_CLIENT_ID: demo-client
      RENGA_RUNNER_IMAGE: ${DOCKER_PREFIX}minimal-notebook:${PLATFORM_VERSION}
      RENGA_REVIEW_DOMAIN: ${PLATFORM_DOMAIN}
    restart: always
    volumes:
      - gitlab-runner-data:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - default
      - review

#   storage:
#     image: ${DOCKER_REPOSITORY}renga-storage:$PLATFORM_VERSION
#     environment:
#       AUTHORIZATION_CLIENT_SECRET: $AUTHORIZATION_CLIENT_SECRET
#       PLAY_APPLICATION_SECRET: $PLAY_APPLICATION_SECRET
#       RENGA_SERVICES_AUTHORIZATION_URL: ${RENGA_ENDPOINT}/auth/realms/Renga/protocol/openid-connect/auth
#       RESOURCE_MANAGER_PUBLIC_KEY: $RESOURCE_MANAGER_PUBLIC_KEY
#       STORAGE_BACKEND_LOCAL_ENABLED: "true"
#     volumes:
#     - ./services/storage/data:/data
#     ports:
#     - 9000
#     restart: on-failure
#     labels:
#       traefik.enable: "true"
#       traefik.frontend.rule: PathPrefix:/api/storage



  ui:
    image: ${DOCKER_PREFIX}renga-ui:${PLATFORM_VERSION}
    restart: always
    environment:
      GITLAB_URL: ${GITLAB_URL}
      RENGA_UI_URL: http://${PLATFORM_DOMAIN}
      RENGA_ENDPOINT: ${RENGA_ENDPOINT}
      KEYCLOAK_URL: ${KEYCLOAK_URL}
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: PathPrefix:/
      traefik.frontend.passHostHeader: "false"
    networks:
      - default

  reverse-proxy:
    image: traefik
    command: --web --web.address=:81 \
      --docker --docker.watch --docker.domain=${PLATFORM_DOMAIN} \
      --debug --logLevel=INFO \
      --defaultentrypoints=http,https \
      --entrypoints='Name:http Address::80' \
      --entrypoints='Name:https Address::443 TLS:/ssl/test.crt,/ssl/test.key' \
      --entrypoints='Name:service Address::8080' \
      --docker.exposedbydefault=false
    # FIXME usage of self signed certs --entrypoints='Name:http Address::80 Redirect.EntryPoint:https' \
    ports:
      - 80:80
      - 443:443
      - 8080:8080
      - 81:81
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /dev/null:/traefik.toml
      - ./services/traefik/ssl/:/ssl/:ro
    networks:
      - default
      - review

  jupyterhub:
    build: services/jupyterhub
    command: jupyterhub --debug
    ports:
      - 8000
      - 8081
    environment:
      # FIXME generate once
      JUPYTERHUB_CRYPT_KEY: 0abe09ef9c48ac5af43e5db8ba0447acd72fa1b88415bcf80dc8dea654c0fe95
      OAUTH2_TOKEN_URL: ${KEYCLOAK_URL}/auth/realms/Renga/protocol/openid-connect/token
      OAUTH2_AUTHORIZE_URL: ${KEYCLOAK_URL}/auth/realms/Renga/protocol/openid-connect/auth
      KEYCLOAK_URL: ${KEYCLOAK_URL}
      GITLAB_HOST: ${GITLAB_URL}
      GITLAB_CLIENT_ID: jupyterhub
      GITLAB_CLIENT_SECRET: no-secret-needed
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./services/jupyterhub/jupyterhub_config.py:/srv/jupyterhub/jupyterhub_config.py:ro
      - ./services/jupyterhub/project_service.py:/srv/jupyterhub/project_service.py:ro
    labels:
      traefik.enable: "true"
      traefik.port: '8000'
      traefik.frontend.rule: "Host:jupyterhub.${PLATFORM_DOMAIN}"
    networks:
      default:
        aliases:
          - jupyterhub.${PLATFORM_DOMAIN}
      review:
        aliases:
          - jupyterhub.${PLATFORM_DOMAIN}

networks:
  review:
    external: true
